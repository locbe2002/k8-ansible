---
# Run with: ansible-playbook -i inventory pb1
# To be run on all k8s cluster nodes...
# TO Add: Disable SELinux, Disable firewalld, Disable swap...
- name: Docker Install 
  hosts: all 
  vars:
    wd: "{{ lookup('pipe', 'pwd') }}"
    assets: "{{ wd }}/assets"
    sleep10: 10
    varsfile: "{{ wd }}/proj_vars"
    zdt: "{{ lookup('pipe', 'date  +\"%m%d%y_%H%M%S\"') }}"
  vars_files:
    - "{{ varsfile }}" 
    #docker_version: 19.03.14
    #kubernetes_version: 1.18.17
  remote_user: root

  tasks:
# Following is needed if we work with Calico
  - name: Copy cni.conf to /etc/NetworkManager/conf.d/calico.conf 
    copy:
      src: "{{ assets }}/cni.conf"
      dest: /etc/NetworkManager/conf.d/cni.conf 

  - name: Restart NetworkManager 
    ansible.builtin.systemd:
      name: NetworkManager.service
      state: restarted
      daemon_reload: yes      

  - name: Copy docker-ce.repo 
    copy:
      src: "{{ assets }}/docker-ce.repo"
      dest: /etc/yum.repos.d/docker-ce.repo 

  - name: Install docker 
    yum:
      name: 
        - docker-ce-{{ docker_version }}
        - docker-ce-cli-{{ docker_version }}
        - containerd.io 
      enablerepo: "docker-ce-stable" 
      state: present

  - name: Enable and restart docker
    ansible.builtin.systemd:
      name: docker.service
      state: started
      enabled: yes 

  - name: Enable and restart containerd 
    ansible.builtin.systemd:
      name: containerd.service 
      state: started
      enabled: yes 
  
  - name: Copy proxy env file to /etc/environment 
    copy:
      src: "{{ assets }}/{{ svc_env_proxy }}"
      dest: /etc/environment

  - name: Copy proxy env file to sysconfig 
    copy:
      src: "{{ assets }}/{{ svc_env_proxy }}"
      dest: "/etc/sysconfig/{{ svc_env_proxy }}"

  - name: Copy script to add env sourcing to service
    copy:
      src: "{{ assets }}/add_env_to_service.py"
      dest: "{{ remote_basedir }}/scripts"
      mode: '0755'

  - name: backup docker.service orig
    copy:
      src: /usr/lib/systemd/system/docker.service
      dest: "{{ remote_basedir }}/bkp/docker.service.orig.{{ zdt }}"
      remote_src: yes
    ignore_errors: yes

  - name: Exec add env sourcing to docker.service
    shell: "{{ remote_basedir }}/scripts/add_env_to_service.py /usr/lib/systemd/system/docker.service"

  - name: backup containerd.service orig
    copy:
      src: /usr/lib/systemd/system/containerd.service
      dest: "{{ remote_basedir }}/bkp/containerd.service.orig.{{ zdt }}"
      remote_src: yes
    ignore_errors: yes

  - name: Exec add env sourcing to containerd.service
    shell: "{{ remote_basedir }}/scripts/add_env_to_service.py /usr/lib/systemd/system/containerd.service"

  - name: Copy docker daemon.json for systemd usage and overlay 
    copy:
      src: "{{ assets }}//docker_daemon.json"
      dest: /etc/docker/daemon.json

  - name: Just force systemd to reread configs (2.4 and above)
    ansible.builtin.systemd:
      daemon_reload: yes 

  - name: Restart containerd 
    ansible.builtin.systemd:
      name: containerd.service
      state: restarted

  - name: Sleep betwen containerd restart and docker restart
    pause:
      seconds: 10 

  - name: Restart docker
    ansible.builtin.systemd:
      name: docker.service
      state: restarted

 
  - name: Print msg about sleep before kubelete enable 
    ansible.builtin.debug:
      msg: System "Will sleep for 30 seconds, check on app1 if kubelete exists..." 

  - name: Sleep betwen Docker restart and containerd restart
    pause:
      seconds: 30 

  - name: systemctl daemon reload 
    ansible.builtin.systemd:
      daemon_reload: yes 

  - name: Enable and restart docker
    ansible.builtin.systemd:
      name: docker.service
      state: started

  - name: Print msg about sleep 
    ansible.builtin.debug:
      msg: System "Just restarted Docker will sleep 8 seconds before restarting Kubernetes" 

  - name: Sleep betwen Docker restart and containerd restart
    pause:
      seconds: 8 

  - name: Enable and restart containerd 
    ansible.builtin.systemd:
      name: containerd.service
      state: started
      enabled: yes 

  - name: Sleep betwen containerd restart and Kubernetes restart
    pause:
      seconds: 8
 
